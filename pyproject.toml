[build-system]
requires = ["setuptools>61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastwindx"
version = "0.1.0"
description = "Web app template made with FastAPI, HTMX, Tailwind CSS, and DaisyUI."
authors = [
    { name = "Michiel M" }
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["fastapi", "htmx", "tailwindcss", "daisyui", "web", "app", "template", "skeleton", "project", "boilerplate"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Operating System :: OS Independent",
    "Environment :: Web Environment",
    "Topic :: Software Development :: User Interfaces",
]

dependencies = [
    "fastapi==0.112.0",
    "uvicorn==0.30.6",
    "sqlmodel==0.0.21",
    "SQLAlchemy-Utils==0.41.2",
    "alembic==1.13.2",
    "pydantic==2.8.2",
    "pydantic-settings==2.4.0",
    "jinja2==3.1.4",
    "python-dotenv==1.0.1",
    "click==8.1.7",
    "python-jose==3.3.0"
]

[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
release = ["build", "twine"]
static-code-qa = ["pre-commit", "ruff", "pylint", "mypy"]
dev = ["fastwindx[test,release,static-code-qa]"]

[tool.setuptools.packages.find]
include = ["fastwindx"]
exclude = ["node_modules", "venv"]

[project.scripts]
fastwindx = "fastwindx.app.cli:main"

[tool.setuptools.package-data]
fastwindx = ["**/*"]
"*" = ["LICENSE", "README.md", "*.txt", "*.yml", "Dockerfile"]

[tool.setuptools.exclude-package-data]
fastwindx = ["venv", "node_modules", "__pycache__"]

[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache",
    ".nox", ".pants.d", ".pytype", ".ruff_cache", ".svn",
    ".tox", ".venv", "__pypackages__", "_build", "buck-out",
    "build", "dist", "node_modules", "venv",
]
line-length = 119
target-version = "py311"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B"]
ignore = ["E501", "B008", "C901"]
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["fastwindx"]

[tool.black]
line-length = 119
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
pretty = true
incremental = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = ["tests"]

[tool.pylint.main]
ignore-patterns = ["test_.*?py"]
init-hook = "import sys; sys.path.append('.')"
ignore = ["CVS"]
ignore-paths = ["^venv/.*$"]

[tool.pylint.messages_control]
disable = [
    "missing-docstring",
    "invalid-name",
]

[tool.pylint.format]
max-line-length = 119

[tool.pylint.design]
max-parents = 15
