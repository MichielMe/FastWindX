[build-system]
requires = ["setuptools>61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastwindx"
version = "0.1.0"
description = "Web app template made with FastAPI, HTMX, Tailwind CSS, and DaisyUI."
authors = [
	{ name = "Michiel M" }
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["fastapi", "htmx", "tailwindcss", "daisyui", "web", "app", "template", "skeleton", "project", "boilerplate"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: Jinja2",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Operating System :: OS Independent",
    "Environment :: Web Environment",
    "Topic :: Software Development :: User Interfaces",
]

dependencies = [
	"fastapi>=0.112.0,<0.113.0",
	"uvicorn>=0.30.6,<1.0.0",
	"sqlmodel>=0.0.21,<0.1.0",
	"alembic>=1.13.2,<2.0.0",
	"pydantic>=2.8.2,<3.0.0",
	"pydantic-settings>=2.4.0,<3.0.0",
	"jinja2>=3.1.4,<4.0.0",
	"python-dotenv>=1.0.1,<2.0.0",
	"click>=8.1.7,<9.0.0",
]


[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
dev = [ "build", "black", "isort", "pre-commit", "ruff", "wheel"]
colors = ["rich"]
release = ["build"]

[tool.setuptools.packages.find]
# This will include only the `fastwindx` package and exclude `node_modules`
include = ["fastwindx"]
exclude = ["node_modules", "venv"]

[project.scripts]
fastwindx = "fastwindx.app.cli:main"

[tool.setuptools.package-data]
fastwindx = ["**/*"]
"*" = ["LICENSE", "README.md", "*.txt", "*.yml", "Dockerfile"]

[tool.setuptools.exclude-package-data]
fastwindx = ["venv", "node_modules", "__pycache__"]

[tool.flake8]
docstring-convention = "all"
ignore = ["D107", "D212", "E501", "W503", "W605", "D203", "D100"]
exclude = ["venv", "node_modules"]
max-line-length = 119

[tool.isort]
profile = "black"
multi_line_output = "VERTICAL_HANGING_INDENT"
force_grid_wrap = 2
line_length = 119

[tool.pylint."messages control"]
disable = [
    "line-too-long",
    "trailing-whitespace",
    "missing-function-docstring",
    "consider-using-f-string",
    "import-error",
    "too-few-public-methods",
    "redefined-outer-name",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
	"tests",
]

[tool.black]
line-length = 119
exclude = "venv"

[tool.ruff]
# Enable flake8-bugbear (`B`) rules.
select = ["E", "F", "B", "ERA"]

# Never enforce `E501` (line length violations).
ignore = ["E501", "F401"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]
line-length = 119

[tool.mypy]
python_version = "3.12"
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
strict_optional = true
no_implicit_optional = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
pretty = true
incremental = false